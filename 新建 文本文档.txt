struct PointF { public float x, y; }

PointF[] points = ...; // 假设有 132 个点
int rows = 6, cols = 22;
PointF[,] grid = new PointF[rows, cols];

// 1. 计算边界
float minX = points.Min(p => p.x);
float maxX = points.Max(p => p.x);
float minY = points.Min(p => p.y);
float maxY = points.Max(p => p.y);

// 2. 每个格子宽高
float cellWidth = (maxX - minX) / cols;
float cellHeight = (maxY - minY) / rows;

// 3. 将每个点映射进 grid[i,j]
foreach (var p in points)
{
    int col = (int)((p.x - minX) / cellWidth);
    int row = (int)((p.y - minY) / cellHeight);

    // 边界保护
    col = Math.Min(cols - 1, Math.Max(0, col));
    row = Math.Min(rows - 1, Math.Max(0, row));

    grid[row, col] = p;
}


public static int[,] MergeArraysHorizontalFlexible(int[,] left, int[,] right, bool insertLeft)
{
    int rowsLeft = left.GetLength(0);
    int colsLeft = left.GetLength(1);
    int rowsRight = right.GetLength(0);
    int colsRight = right.GetLength(1);

    // 确保行数相同
    if (rowsLeft != rowsRight)
        throw new ArgumentException("两个数组的行数必须相同");

    int totalCols = colsLeft + colsRight;
    int[,] result = new int[rowsLeft, totalCols];

    for (int i = 0; i < rowsLeft; i++)
    {
        if (insertLeft)
        {
            // right 放在左边，left 放在右边
            for (int j = 0; j < colsRight; j++)
                result[i, j] = right[i, j];
            for (int j = 0; j < colsLeft; j++)
                result[i, j + colsRight] = left[i, j];
        }
        else
        {
            // left 放左边，right 放右边
            for (int j = 0; j < colsLeft; j++)
                result[i, j] = left[i, j];
            for (int j = 0; j < colsRight; j++)
                result[i, j + colsLeft] = right[i, j];
        }
    }

    return result;
}

2025/7/8
     ho_reg.Dispose();
     HOperatorSet.Threshold(ho_img, out ho_reg, 0, 170);
     ho_connectedReg.Dispose();
     HOperatorSet.ClosingCircle(ho_reg, out ho_connectedReg, 10);
     {
         HObject ExpTmpOutVar_0;
         HOperatorSet.Connection(ho_connectedReg, out ExpTmpOutVar_0);
         ho_connectedReg.Dispose();
         ho_connectedReg = ExpTmpOutVar_0;
     }
     ho_SelectedRegions.Dispose();
     HOperatorSet.SelectShape(ho_connectedReg, out ho_SelectedRegions, (((new HTuple("area")).TupleConcat(
         "anisometry")).TupleConcat("rb")).TupleConcat("ra"), "and", (((new HTuple(3000)).TupleConcat(
         3)).TupleConcat(150)).TupleConcat(600), (((new HTuple(99999999)).TupleConcat(
         6)).TupleConcat(250)).TupleConcat(900));


     hv_Row.Dispose(); hv_Column.Dispose(); hv_phi.Dispose(); hv_Length1.Dispose(); hv_Length2.Dispose();
     HOperatorSet.SmallestRectangle2(ho_SelectedRegions, out hv_Row, out hv_Column,
         out hv_phi, out hv_Length1, out hv_Length2);

     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Index.Dispose();
         HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyID, hv_Row + hv_OffsetRowBegin,
             hv_Column + hv_OffsetColumnBegin, hv_Row + hv_OffsetRowEnd, hv_OffsetColumnEnd + hv_Column,
             40, 5, 2, 60, new HTuple(), new HTuple(), out hv_Index);
     }
     ho_Contours.Dispose(); hv_MeasureRow.Dispose(); hv_MeasureColumn.Dispose();
     HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyID, "all",
         "negative", out hv_MeasureRow, out hv_MeasureColumn);
     HOperatorSet.ApplyMetrologyModel(ho_img, hv_MetrologyID);
     hv_Parameter.Dispose();
     HOperatorSet.GetMetrologyObjectResult(hv_MetrologyID, "all", "all", "result_type",
         "all_param", out hv_Parameter);
     ho_RightTopContour1.Dispose();
     HOperatorSet.GetMetrologyObjectResultContour(out ho_RightTopContour1, hv_MetrologyID,
         "all", "all", 1);
     hv_RightTopContourRow1.Dispose(); hv_RightTopContourCol1.Dispose(); hv_RightTopContourRow2.Dispose(); hv_RightTopContourCol2.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
     HOperatorSet.FitLineContourXld(ho_RightTopContour1, "tukey", -1, 0, 5, 2, out hv_RightTopContourRow1,
         out hv_RightTopContourCol1, out hv_RightTopContourRow2, out hv_RightTopContourCol2,
         out hv_Nr, out hv_Nc, out hv_Dist);
     //[208, 137, 213, 90], [49, 327, 139, 307], [100, 201, 214, 89], [82, 318, 56, 375]
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Index2.Dispose();
         HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyID, hv_Row + hv_OffsetLeftTopRowBegin,
             hv_Column + hv_OffsetLeftTopColumnBegin, hv_Row + hv_OffsetLeftTopRowEnd, hv_OffsetLeftTopColumnEnd + hv_Column,
             40, 5, 1, 30, (new HTuple("measure_transition")).TupleConcat("min_score"),
             (new HTuple("negative")).TupleConcat(0.5), out hv_Index2);
     }

     //add_metrology_object_line_measure (MetrologyID, 213, 139, 214, 56, 90, 5, 1, 30, ['measure_transition', 'min_score'], ['negative', 0.5], Index2)
     ho_Contours.Dispose(); hv_MeasureRow.Dispose(); hv_MeasureColumn.Dispose();
     HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyID, hv_Index2,
         "negative", out hv_MeasureRow, out hv_MeasureColumn);
     HOperatorSet.ApplyMetrologyModel(ho_img, hv_MetrologyID);
     hv_Parameter.Dispose();
     HOperatorSet.GetMetrologyObjectResult(hv_MetrologyID, hv_Index2, "all", "result_type",
         "all_param", out hv_Parameter);
     ho_LeftTopContour1.Dispose();
     HOperatorSet.GetMetrologyObjectResultContour(out ho_LeftTopContour1, hv_MetrologyID,
         hv_Index2, "all", 1);
     hv_LeftTopContourRow1.Dispose(); hv_LeftTopContourCol1.Dispose(); hv_LeftTopContourRow2.Dispose(); hv_LeftTopContourCol2.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
     HOperatorSet.FitLineContourXld(ho_LeftTopContour1, "tukey", -1, 0, 5, 2, out hv_LeftTopContourRow1,
         out hv_LeftTopContourCol1, out hv_LeftTopContourRow2, out hv_LeftTopContourCol2,
         out hv_Nr, out hv_Nc, out hv_Dist);

     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Index3.Dispose();
         HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyID, hv_Row + hv_OffsetLeftBottomRowBegin,
             hv_Column + hv_OffsetLeftBottomColumnBegin, hv_Row + hv_OffsetLeftBottomRowEnd,
             hv_OffsetLeftBottomColumnEnd + hv_Column, 40, 5, 1, 30, (new HTuple("measure_transition")).TupleConcat(
             "min_score"), (new HTuple("negative")).TupleConcat(0.5), out hv_Index3);
     }
     ho_Contours.Dispose(); hv_MeasureRow.Dispose(); hv_MeasureColumn.Dispose();
     HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyID, hv_Index3,
         "negative", out hv_MeasureRow, out hv_MeasureColumn);
     HOperatorSet.ApplyMetrologyModel(ho_img, hv_MetrologyID);
     hv_Parameter.Dispose();
     HOperatorSet.GetMetrologyObjectResult(hv_MetrologyID, hv_Index3, "all", "result_type",
         "all_param", out hv_Parameter);
     ho_LeftBottomContour1.Dispose();
     HOperatorSet.GetMetrologyObjectResultContour(out ho_LeftBottomContour1, hv_MetrologyID,
         hv_Index3, "all", 1);
     hv_LeftBottomContourRow1.Dispose(); hv_LeftBottomContourCol1.Dispose(); hv_LeftBottomContourRow2.Dispose(); hv_LeftBottomContourCol2.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
     HOperatorSet.FitLineContourXld(ho_LeftBottomContour1, "tukey", -1, 0, 5, 2, out hv_LeftBottomContourRow1,
         out hv_LeftBottomContourCol1, out hv_LeftBottomContourRow2, out hv_LeftBottomContourCol2,
         out hv_Nr, out hv_Nc, out hv_Dist);

     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Index4.Dispose();
         HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyID, hv_Row + hv_OffsetRightBottomRowBegin,
             hv_Column + hv_OffsetRightBottomColumnBegin, hv_Row + hv_OffsetRightBottomRowEnd,
             hv_OffsetRightBottomColumnEnd + hv_Column, 40, 5, 2, 60, new HTuple(), new HTuple(),
             out hv_Index4);
     }
     ho_Contours.Dispose(); hv_MeasureRow.Dispose(); hv_MeasureColumn.Dispose();
     HOperatorSet.GetMetrologyObjectMeasures(out ho_Contours, hv_MetrologyID, hv_Index4,
         "negative", out hv_MeasureRow, out hv_MeasureColumn);
     HOperatorSet.ApplyMetrologyModel(ho_img, hv_MetrologyID);
     hv_Parameter.Dispose();
     HOperatorSet.GetMetrologyObjectResult(hv_MetrologyID, hv_Index4, "all", "result_type",
         "all_param", out hv_Parameter);
     ho_RightBottomContour1.Dispose();
     HOperatorSet.GetMetrologyObjectResultContour(out ho_RightBottomContour1, hv_MetrologyID,
         hv_Index4, "all", 1);
     hv_RightBottomContourRow1.Dispose(); hv_RightBottomContourCol1.Dispose(); hv_RightBottomContourRow2.Dispose(); hv_RightBottomContourCol2.Dispose(); hv_Nr.Dispose(); hv_Nc.Dispose(); hv_Dist.Dispose();
     HOperatorSet.FitLineContourXld(ho_RightBottomContour1, "tukey", -1, 0, 5, 2,
         out hv_RightBottomContourRow1, out hv_RightBottomContourCol1, out hv_RightBottomContourRow2,
         out hv_RightBottomContourCol2, out hv_Nr, out hv_Nc, out hv_Dist);

     hv_Row1_mid.Dispose();
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Row1_mid = (hv_RightTopContourRow1 + hv_LeftBottomContourRow1) / 2;
     }
     hv_Column1_mid.Dispose();
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Column1_mid = (hv_RightTopContourCol1 + hv_LeftBottomContourCol1) / 2;
     }

     hv_Row2_mid.Dispose();
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Row2_mid = (hv_LeftTopContourRow1 + hv_RightBottomContourRow1) / 2;
     }
     hv_Column2_mid.Dispose();
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         hv_Column2_mid = (hv_LeftTopContourCol1 + hv_RightBottomContourCol1) / 2;
     }

     ho_Crosses2.Dispose();
     HOperatorSet.GenCrossContourXld(out ho_Crosses2, hv_Row1_mid, hv_Column1_mid,
         12, 0);
     using (HDevDisposeHelper dh = new HDevDisposeHelper())
     {
         ho_line.Dispose();
         HOperatorSet.GenRegionLine(out ho_line, hv_Row1_mid + hv_OffsetLineRowBegin, hv_Column1_mid + hv_OffsetLineColumnBegin,
             hv_Row1_mid + hv_OffsetLineRowEnd, hv_Column1_mid + hv_OffsetLineColumnEnd);
     }

     //gen_region_line (line2, Row1_mid+OffsetLineRowBegin+540, Column1_mid+OffsetLineColumnBegin, Row1_mid+OffsetLineRowEnd+540.5, Column1_mid+OffsetLineColumnEnd)

     ho_reducedImg.Dispose();
     HOperatorSet.ReduceDomain(ho_img, ho_line, out ho_reducedImg);
     hv_Mean.Dispose(); hv_Deviation.Dispose();
     HOperatorSet.Intensity(ho_line, ho_img, out hv_Mean, out hv_Deviation);


     //     HOperatorSet.Intensity(ho_line, ho_img, out hv_Mean, out hv_Deviation);

     //核心是算出来每次拍照视野内的产品行数和列数
     //当前拍照的视野内产品数
     int ArrRows = 5;
     int ArrCols = 2;
     //产品放上开始   奇数行判断第一个；偶数行判断最后一颗
     //1.判断行的奇偶2.判断是第一个还是最后一个（totalMovingNum%ColSteps == 1新行开始 == 0一行结束 totalMovingNum/ColSteps为行号）3.
     //偶数行1.2.3    还是整除直接保留，不能整除向上取整
     //if (Math.Ceiling(Convert.ToDouble(totalMovingNum / ColSteps)) %2 == 0) //判断当前行数是否是偶数
     //{
     //    //偶数行，判断是否是行开始 举例4%3
     //    if((totalMovingNum % ColSteps) == 1)                                
     //    {
     //        //如果每列产品数能整除视野内产品列数，返回自身；否则返回每列产品数对视野内产品列数求余
     //        ArrCols = ((ProductCols % ColStepNum) == 0) ? ArrCols : (ProductCols % ColStepNum);
     //    }
     //}
     //else
     //{
     //    //如果是奇数行，判断是否是行结束

     //}
     //if ((totalMovingNum% RowSteps)  == (RowSteps - 1))
     //{
     //    //如果到了最后一行，需重新计算产品有几行。可以整除返回自身，不能整除返回余数

     //    ArrRows = ((ProductRows % RowStepNum) == 0) ? ArrRows : (ProductRows% RowStepNum);

     //}
     //if ((totalMovingNum%ColSteps) == (ColSteps - 1))
     //{
     //    ArrCols = ((ProductCols % ColStepNum) == 0) ? ArrCols : (ProductCols % ColStepNum);
     //}

     //20250704核心还是判断局部二维数据的row和col。方法是1.触发2.位移总数+1 3.计算当前行的奇偶已经是否是最后或第一个
     //行的尾数和列的尾数都需要判断


     //先计算列再计算行,核心只有行结束或行开始是需要计算的否则都是固定的；其次行只需要判断余数，因为没有z字
     //判断行的奇偶性2.计算尾数列值
     //如果是偶数行 设：totalMovingNum  = 3 ColSteps = 1 
     if (Math.Ceiling(Convert.ToDouble(totalMovingNum / ColSteps)) % 2 == 0)
     {
         //偶数行，判断是否是行开始 举例4%3
         if ((totalMovingNum % ColSteps) == 1)   // == 1说明 行开始
         {
             //如果每列产品数能整除视野内产品列数，返回自身；否则返回每列产品数对视野内产品列数求余
             ArrCols = ((ProductCols % ColStepNum) == 0) ? ArrCols : (ProductCols % ColStepNum);
         }
     }
     else
     {
         //奇数行判断是否是行结束 
         if ((totalMovingNum % ColSteps) == 0) //==0说明行结束
         {
             //如果每列产品数能整除视野内产品列数，返回自身；否则返回每列产品数对视野内产品列数求余
             ArrCols = ((ProductCols % ColStepNum) == 0) ? ArrCols : (ProductCols % ColStepNum);
         }

     }


     //对于行
     //如果是最后一行 设totalMovingNum == 11;ColSteps
     if (Math.Ceiling(Convert.ToDouble(totalMovingNum / ColSteps)) == RowSteps)
     {
         ArrRows = ((ProductRows % RowStepNum) == 0) ? ArrRows : (ProductRows % RowStepNum);
     }
    

     double[] rows = hv_Row1_mid.ToDArr();
     double[] columns = hv_Column1_mid.ToDArr();
     double[] mean = hv_Mean.ToDArr();
     List<Point2D> ponits = new List<Point2D>();
     for (int i = 0; i < rows.Length; i++)
     {
         ponits.Add(new Point2D(rows[i], columns[i], mean[i] < 70 ? true : false));
     }
     //col:递增 row:相等
     //这里相当于执行了一次矩阵转置
     Point2D[,] parts = SpatialSort(ponits, ArrCols, ArrRows, 150);
     //如何计算每次拍照视野内的产品行数和列数


     //判断一行结束2.合并到最终结果3.
     //将单次识别结果合并到singlwResult2.如果到了一行末尾将singleResult合并到totalResult3.清空singleResult4.将当前测量结果插入到singleResult4.如果是一行的开头，计算singleResult的尺寸

     //当前的逻辑也就是说，同样是判断是否到达行尾或行开始，但是默认除了行开始或行尾其他都是正常的，但其实不是这样的。到了最后一列，每次拍照是两个

     //行开始，分配singleresult和part，并将当前识别结果合并到
     if ((totalMovingNum % RowSteps) == 1)
     {
         singleResult = new Point2D[10, ArrRows];

         MergePoint2DArraysVerticalFlexibleSafe(ref singleResult, parts, true);

     }
     else if ((totalMovingNum % RowSteps) == 0)
     {
         //最后一个合并到totalresult
         MergePoint2DArraysHorizontalFlexibleSafe(ref totalResult, singleResult, false);
     }
     else
     {
         //既不是行开始也不是行结束，直接合并到singleResult
         MergePoint2DArraysHorizontalFlexibleSafe(ref singleResult, parts, false);
         if (Math.Ceiling(Convert.ToDouble(totalMovingNum / ColSteps)) % 2 == 0)
         {
             //偶数行向上合并
             MergePoint2DArraysVerticalFlexibleSafe(ref singleResult, parts, false);

         }
         else
         {
             //奇数行向下合并
             MergePoint2DArraysVerticalFlexibleSafe(ref singleResult, parts, true);


         }

     }
